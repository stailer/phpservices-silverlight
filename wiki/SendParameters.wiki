== your method in PHP :==

<code language="php">
<?php
class Services_Example 
{
    public function GetName($firstname, $lastname)
    {
        return 'Hello from php, '.$firstname.' '.$lastname.' !';
    }
}
</code>


== C# Client Service, create your call :==

<code language="c#">
public void Services_Example_GetName_Completed(string myReturn)
{
     MessageBox.Show(myReturn);
}

public void GetHelloWorld()
{
  List<PhpClientParameter> parameters = new List<PhpClientParameter>();
  parameters.Add(new PhpClientParameter("firstname", "Jeff"));
  parameters.Add(new PhpClientParameter("lastname", "DOE"));

  this.php.ExecuteAsync("Services_Example", "GetName", parameters);
}
</code>

This sample return "Hello from php, Jeff DOE !"

NOTE : You must respect parameters order in your php method.



== Recommended ==
Send your parameters in object :


== your method in PHP :==

<code language="php">
<?php
class Services_Example 
{
    public function GetName($myCustomer)
    {
        return 'Hello from php, '.$myCustomer->firstname.' '.$myCustomer->lastname.' !';
    }
}
</code>

== C# Client Service, create your call :==

<code language="c#">
public void Services_Example_GetName_Completed(string myReturn)
{
     MessageBox.Show(myReturn);
}

public void GetHelloWorld()
{
  List<PhpClientParameter> parameters = new List<PhpClientParameter>();

  dynamic MyCustomer = new { firstname = "Jeff", lastname = "DOE" };
  parameters.Add( new PhpClientParameter("client", MyCustomer));

  this.php.ExecuteAsync("Services_Example", "GetName", parameters);
}
</code>

Dynamic is optional, you can create your objects.